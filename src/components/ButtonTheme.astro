---
interface Props {
	label: String;
}

const { label } = Astro.props;
---
<button-theme>
    <button>
        <span class="sr-only">Toggle Theme</span>
        <span>{label}</span>
    </button>
</button-theme>

<style>
	button {
		padding: 1em 1em;
		cursor: pointer;
		background-color: rgb(var(--gray-light));
		background-image: none;
		transition: 0.2s ease;

	}
	button:hover {
		background-color: rgb(var(--cerulean));
		transition: 0.2s ease;
	}
</style>

<script>
    class ButtonTheme extends HTMLElement {
        constructor() {
            super();

            const buttonTheme = this.querySelector('button');

            const setTheme = (dark: boolean) => {
                document.body.classList[dark ? 'remove' : 'add']('theme-dark');
                buttonTheme!.setAttribute('aria-pressed', String(!dark));
            }

            buttonTheme!.addEventListener('click', () => setTheme(this.isDark()));      
        }

        isDark() {
            return document.body.classList.contains('theme-dark');
        }
    }

    // Tell the browser to use our ButtonTheme class for <button-theme> elements.
    customElements.define('button-theme', ButtonTheme);
</script>