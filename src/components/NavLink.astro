---
import type { HTMLAttributes } from 'astro/types';

type Props = HTMLAttributes<'a'>;

const { href } = Astro.props;

const { pathname } = Astro.url;
const subpath = pathname.match(/[^\/]+/g);
const isActive = href === pathname || href === '/' + subpath?.[0];
---

<nav-item class="nav-item">
	<a href={href} class:list={[{ active: isActive }]}>
		<slot />
	</a>
</nav-item>

<style>
	/* Navigation Item */
	.nav-item {
		display: flex;
		padding: 0.75em;
		text-align: center;
		justify-content: center;
	}
	
	.nav-item:active {
		color: var(--anchor-active);
	}
	.nav-item:hover {
		cursor: pointer;
		background-color: var(--color-nav-item);
	}

	/* Anchor */
	a {
		display: flex;
		align-self: center;
		color: var(--color-nav-link);
		text-decoration: none;
	}
	a.active {
		font-weight: bolder;
		text-decoration: underline;
	}

	@media (min-width: 768px) {
		.nav-item {
			min-width: 150px
		}
	}
</style>

<script>
    class NavItem extends HTMLElement {
        constructor() {
            super();

            this.addEventListener('click', () => handleClick());
            
            const handleClick = () => {
                // forward click event to anchor tag
                let anchor = this.querySelector('a');
				anchor!.click();
            }
        }
    }

    // Tell the browser to use our NavItem class for <nav-item> elements.
    customElements.define('nav-item', NavItem);
</script>